#Conditional Hooks

$Application: FS2_Open

$On Game Init: [

	--Version 0.5, released on May 22, 2023 by wookieejedi
	Object_Info_Help = {} --makes a global variable! This is the only global variable this script creates. 
	
	---------------------------------
	--USER OPTIONS---
	-----------------

	--Position
	--To change position of the gauge set values of origin and offset, similar to hud_gaugles.tbl: 
	--Note this custom gauge only has three size scales (<= 1024 width, 1024 < width <= 3200, and > 3200)
	--Also note that since this gauge dynamically changes in width and height two additional options for position are available:
	--Object_Info_Help.start_point states where to start drawing the gauge. 
		--Options for x include "left", "middle", and "right"
		--Options for y include "top", "middle", and "bottom"
	Object_Info_Help.origin = { x = 0.2, y = 0.0 }
	Object_Info_Help.offset = { x = 0, y = 10 }
	Object_Info_Help.start_point = { x = "left", y = "top" }
	-----------------
	
	--Width
	--By default the gauge will grow to accomodate the longest entry 
	--To disable this behavior and set a constant width specify a maximum string for "maxstring"'
	--If "is_width_dynamic" == true, then "maxstring" will not be used
	--For "maxstring", write the longest string that may be needed here for the gauge
	Object_Info_Help.is_width_dynamic = true
	Object_Info_Help.maxstring = "MMMMMMMM: MMMMMMMMMMMMMMMMMM"
	-----------------
	
	--Font	
	--To set custom fonts set the integer index or font file name listed in fonts.tbl.
	--If the font specific does not exist, the gauge will use the font of the directives gauge. 
	--For example, to make the font_key 'font01', just replace 'nil' with "font01".
	--IE Object_Info_Help.font_key = "font01"
	Object_Info_Help.font_key = nil

	--Gauge Title
	--To set the default title of the gauge simpy change the string value 
	--For example, Object_Info_Help.gauge_title_default = "Ship Roles"
	--The title can also be changed in mission by using the "role-gauge-set-title" sexp
	Object_Info_Help.gauge_title_default = "Squadron Roles"

	-----------------
	--End of USER OPTIONS
	---------------------------------

	
	--makes reminder list for object roles
	Object_Info_Help.isactive = false
	Object_Info_Help.basecolor = {35,35,35,255} --dark grey as default
	Object_Info_Help.object_role_list = {}
	

	--reset all 
	function Object_Info_Help:Reset(mission_is_going)

		self.mission_is_going = mission_is_going
		self.object_role_list = {}
		self.gauge_title = self.gauge_title_default
		self.isactive = false
		self.seperator = ": "
		self.origin_mission = {x=self.origin.x, y=self.origin.y}
		self.offset_mission = {x=self.offset.x, y=self.offset.y}

	end

	--sets gauge color
	function Object_Info_Help:SetStyle()

		if not self.mission_is_going then return end

		--set color
		local gauge_name = "Directives" --18 --directive gauge --(hudgauges.h)
		local gauge = hu.getHUDGaugeHandle(gauge_name)
		self.basecolor[1], self.basecolor[2], self.basecolor[3], self.basecolor[4] = hu.getHUDGaugeColor(gauge_name)
		--won't turn off, since this info is placed by FREDer and is mission critical

		--set and check font
		local font
		local specific_font
		if self.font_key ~= nil then
			specific_font = gr.Fonts[self.font_key]
			if specific_font ~= nil then
				font = specific_font
			end
		end
		if font == nil then
			font = gauge:getFont()
		end

		self.Buffer_Width = 4
		self.Rect_Line_Width = 2
		self.Font = font
		self.Base_width, self.Base_height = gauge:getBaseResolution()

	end
	
	--insert object to Object_Info_Help.object_role_list
	function Object_Info_Help:InsertObjectRole(object_name, role_description)
		role_description = role_description or ""
		if object_name ~= nil then 
			local sep = self.seperator or ": "
			local full_string = object_name..sep..role_description
			table.insert(self.object_role_list, {name=object_name, full_string=full_string, role_description=role_description})
			--table.sort(self.object_role_list)
		end 		
	end

	--update object
	function Object_Info_Help:UpdateObjectRole(object_name, role_description)
		role_description = role_description or ""
		if object_name ~= nil then
			--find location in list where this name is 
			for _,v in ipairs(self.object_role_list) do
				if object_name == v.name then 
					v.role_description = role_description
					local sep = self.seperator or ": "
					v.full_string = object_name..sep..role_description
				end
			end
		end
	end
	
	--remove object from Object_Info_Help.object_role_list
	function Object_Info_Help:RemoveObjectRole(object_name)
		--find location in list where this name is 
		for i,v in ipairs(self.object_role_list) do
			if object_name == v.name then 
				table.remove(self.object_role_list, i)
				break
			end
		end
	end

	--draws the gauge
	function Object_Info_Help:Draw()

		--onyl draw if there are entries
		local drawtext_tbl = self.object_role_list
		local num_to_draw = #drawtext_tbl
		if #drawtext_tbl > 0 then 
			
			--make into locals
			local buf = self.Buffer_Width
			local rect_linewidth = self.Rect_Line_Width
			local font = self.Font

			--now set the font
			gr.CurrentFont = font

			--set screen scale as well
			local res = {x=self.Base_width, y=self.Base_height}
			local og_size_mode = gr.CurrentResizeMode
			gr.setScreenScale(res.x, res.y)
			gr.CurrentResizeMode = GR_RESIZE_FULL

			--set all dynamicly sized variables

			--get line sizes 
			local slineh = gr.CurrentFont.Height
			local lineh_add = slineh*0.2
			--account for the low resolution situations where the multipliers make a lot of 0s
			if lineh_add < 1 then 
				lineh_add = 1
			end

			local maxwidth_str = 0
			
			--if dynamic find longest string width
			if self.is_width_dynamic then 
				for _,v in ipairs(drawtext_tbl) do
					local str = v.full_string or ""
					local str_width = gr.getStringWidth(str)
					if str_width > maxwidth_str then
						maxwidth_str = str_width
					end
				end
				--also check the title
				local tstr_width = gr.getStringWidth(self.gauge_title)
				if tstr_width > maxwidth_str then
					maxwidth_str = tstr_width
				end
			else 
				maxwidth_str = gr.getStringWidth(self.maxstring)
			end

			local r, g, b, int = self.basecolor[1], self.basecolor[2], self.basecolor[3], self.basecolor[4]

			--up int for labels 
			local up_int = 50
			local text_int = int
			if int >= 0 and int < (255 - up_int) then 
				text_int = text_int + up_int
			end

			gr.setColor(r, g, b, int)

			--get size of gauge
			local size = {
				x = maxwidth_str + buf*3 + rect_linewidth*2,
				y = rect_linewidth*2 + buf*4 + (num_to_draw)*(slineh+slineh*0.4)
			}

			--update position with user set position arguments
			local pos_helper = {
				x = {left = 0, middle = -0.5, right = -1.0},
				y = {top = 0, middle = - 0.5, bottom = -1.0}
			}

			--get converted offsets/start position
			local start_coor = {x=0, y=0}

			for k,v in pairs(start_coor) do			
				local pos = self.offset_mission[k] + (res[k] * self.origin_mission[k])
				local helper_option = self.start_point[k]
				local helper_x = pos_helper[k][helper_option] or 1
				start_coor[k] = pos + (helper_x * size[k])
			end

			local whole_rect = {
				x1 = start_coor.x,
				y1 = start_coor.y,
				x2 = start_coor.x + size.x,
				y2 = start_coor.y + size.y
			}

			local header_rect = {
				x1 = start_coor.x,
				y1 = start_coor.y,
				x2 = start_coor.x + size.x,
				y2 = start_coor.y + slineh*1.4
			}

			local headerbottom_line = {
				x1 = start_coor.x,
				y1 = start_coor.y + slineh*1.4,
				x2 = start_coor.x + size.x,
				y2 = start_coor.y + slineh*1.4
			}

			--set to low intensity to draw background of gauge
			local bckgrdint = 0.3
			gr.setColor(r, g, b, int*bckgrdint)
			--draw filled header rectangle
			gr.drawRectangle(header_rect.x1, header_rect.y1, header_rect.x2, header_rect.y2, true)
			--update intensity for outline
			gr.setColor(r, g, b, int*0.8)
			--draw bottom line
			gr.drawLine(headerbottom_line.x1, headerbottom_line.y1, headerbottom_line.x2, headerbottom_line.y2)
			--draw main frame
			gr.setLineWidth(rect_linewidth)
			gr.drawRectangle(whole_rect.x1, whole_rect.y1, whole_rect.x2, whole_rect.y2, false)	
			--draw title
			gr.setColor(r, g, b, int)

			local title_pos_x = whole_rect.x1 + buf
			local title_pos_y = whole_rect.y1 + buf
			gr.drawString(self.gauge_title, title_pos_x, title_pos_y)

			--draw names
			local x1 = start_coor.x + buf + rect_linewidth
			for i,v in ipairs(drawtext_tbl) do
				local fstr = v.full_string or ""
				local y1 = headerbottom_line.y1 + buf + (i-1)*(slineh+lineh_add)
				gr.drawString(fstr, x1, y1)
			end

			--reset string
			gr.resetScreenScale()
			gr.CurrentResizeMode = og_size_mode

		end

	end

	--sexp API for Object_Info_Help:InsertObjectRole(object_name)
	mn.LuaSEXPs["role-gauge-add-object"].Action = function(...) 
		
		if #arg <= 0 then return end
		
		for _, value in ipairs(arg) do
		
			local objectname = value[1]
			local objectdescription = value[2]
			Object_Info_Help:InsertObjectRole(objectname, objectdescription)
		
		end		
		
	end
	
	--sexp API for Object_Info_Help:UpdateObjectRole(object_name)
	mn.LuaSEXPs["role-gauge-update-object"].Action = function(...) 
		
		if #arg <= 0 then return end
		
		for _, value in ipairs(arg) do
		
			local objectname = value[1]
			local objectdescription = value[2]
			Object_Info_Help:UpdateObjectRole(objectname, objectdescription)
		
		end
		
	end
	
	mn.LuaSEXPs["role-gauge-update-object-num"].Action = function(...)

		if #arg <= 0 then return end
		
		for _, value in ipairs(arg) do
		
			local objectname = value[1]
			local objectdescription = value[2]
			Object_Info_Help:UpdateObjectRole(objectname, objectdescription)
		
		end
		
	end
	
	--sexp API for Object_Info_Help:InsertObjectRole(object_name)
	mn.LuaSEXPs["role-gauge-remove-object"].Action = function(...) 
		
		if #arg <= 0 then return end
		
		for _, value in ipairs(arg) do
		
			local objectname = value[1]
			Object_Info_Help:RemoveObjectRole(objectname)
		
		end

	end
	
	mn.LuaSEXPs["role-gauge-toggle"].Action = function(toggle_status)
		if type(toggle_status) == "boolean" then
			Object_Info_Help.isactive = toggle_status
		end
	end

	mn.LuaSEXPs["role-gauge-clear-all"].Action = function()
		Object_Info_Help.object_role_list = {}
	end

	mn.LuaSEXPs["role-gauge-set-title"].Action = function(title_str)

		if type(title_str) == "string" then
			Object_Info_Help.gauge_title = title_str
		end
	
	end
	
	mn.LuaSEXPs["role-gauge-set-seperator"].Action = function(seperator_str)

		if type(seperator_str) == "string" then
			Object_Info_Help.seperator = seperator_str
		end
	
	end

]

$State: GS_STATE_HUD_CONFIG
$On State End: [
	Object_Info_Help:SetStyle() --only will update/run if mission is going
]

$State: GS_STATE_GAME_PLAY
$On Gameplay Start: [
	Object_Info_Help:Reset(true)
	Object_Info_Help:SetStyle()
]

$On HUD Draw: [
	if Object_Info_Help.isactive and hu.HUDDrawn and not hu.HUDDisabledExceptMessages and MTIME_OVER_P1 then
		Object_Info_Help:Draw()
	end
]

$On State End: [
	Object_Info_Help:Reset(false)
]


#End
